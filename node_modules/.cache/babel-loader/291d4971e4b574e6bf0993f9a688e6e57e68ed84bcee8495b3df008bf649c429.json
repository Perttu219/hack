{"ast":null,"code":"import { initStore } from './store';\nconst configureStore = () => {\n  const actions = {\n    ADD: (state, amount, timeStamp) => ({\n      timeStamp: state.timeStamp,\n      seconds: state.isPlay ? parseInt((Date.now() - state.timeStamp) / 1000) : state.seconds,\n      renderedSeconds: state.seconds % 60,\n      minutes: parseInt(state.seconds / 60),\n      hours: parseInt(state.minutes / 60),\n      renderedMinutes: state.minutes % 60,\n      isPlay: state.isPlay,\n      isPaused: state.isPaused,\n      pausedSeconds: state.isPaused ? state.pausedSeconds + amount : state.pausedSeconds\n    }),\n    PLAY: state => ({\n      timeStamp: Date.now() - 1200,\n      seconds: 0,\n      renderedSeconds: 0,\n      minutes: 0,\n      hours: 0,\n      renderedMinutes: 0,\n      isPlay: true,\n      isPaused: false,\n      pausedSeconds: state.pausedSeconds\n    }),\n    PAUSE: state => ({\n      timeStamp: state.timeStamp,\n      seconds: state.seconds,\n      renderedSeconds: state.renderedSeconds,\n      minutes: state.minutes,\n      hours: state.hours,\n      renderedMinutes: state.renderedMinutes,\n      isPlay: false,\n      isPaused: true,\n      pausedSeconds: state.pausedSeconds\n    }),\n    UNPAUSE: state => ({\n      timeStamp: state.timeStamp,\n      seconds: state.seconds,\n      renderedSeconds: state.renderedSeconds,\n      minutes: state.minutes,\n      hours: state.hours,\n      renderedMinutes: state.renderedMinutes,\n      isPlay: true,\n      isPaused: true,\n      pausedSeconds: state.pausedSeconds\n    })\n  };\n  initStore(actions, {\n    seconds: 0,\n    minutes: 0,\n    hours: 0,\n    isPlay: false\n  });\n};\nexport default configureStore;","map":{"version":3,"names":["initStore","configureStore","actions","ADD","state","amount","timeStamp","seconds","isPlay","parseInt","Date","now","renderedSeconds","minutes","hours","renderedMinutes","isPaused","pausedSeconds","PLAY","PAUSE","UNPAUSE"],"sources":["/home/moilape/prh/reactapp/section25/replace-redux-06-bonus-multiple-slices (2)/replace-redux-06-bonus-multiple-slices/src/hooks-store/counter-store.js"],"sourcesContent":["import { initStore } from './store';\n\nconst configureStore = () => {\n    const actions = {\n        ADD: (state, amount, timeStamp) => ({\n            timeStamp: state.timeStamp,\n            seconds: state.isPlay ? parseInt((Date.now() - state.timeStamp)/1000) : state.seconds,\n            renderedSeconds: state.seconds % 60,\n            minutes: parseInt(state.seconds/60),\n            hours: parseInt(state.minutes/60),\n            renderedMinutes: state.minutes % 60,\n            isPlay: state.isPlay,\n            isPaused: state.isPaused,\n            pausedSeconds: state.isPaused ? state.pausedSeconds+amount : state.pausedSeconds,\n        }\n            ),\n        PLAY: (state) => ({\n            timeStamp: Date.now()-1200,\n            seconds: 0,\n            renderedSeconds: 0,\n            minutes: 0,\n            hours: 0,\n            renderedMinutes: 0,\n            isPlay: true,\n            isPaused: false,\n            pausedSeconds: state.pausedSeconds,\n        }),\n        PAUSE: (state) => ({\n            timeStamp: state.timeStamp,\n            seconds: state.seconds,\n            renderedSeconds: state.renderedSeconds,\n            minutes: state.minutes,\n            hours: state.hours,\n            renderedMinutes: state.renderedMinutes,\n            isPlay: false,\n            isPaused: true,\n            pausedSeconds: state.pausedSeconds,}),        \n        UNPAUSE: (state) => ({\n            timeStamp: state.timeStamp,\n            seconds: state.seconds,\n            renderedSeconds: state.renderedSeconds,\n            minutes: state.minutes,\n            hours: state.hours,\n            renderedMinutes: state.renderedMinutes,\n            isPlay: true,\n            isPaused: true,\n            pausedSeconds: state.pausedSeconds,}),  \n    };\n    \n\n    initStore(actions, { seconds: 0, minutes: 0, hours: 0, isPlay: false });\n};\n\nexport default configureStore;"],"mappings":"AAAA,SAASA,SAAS,QAAQ,SAAS;AAEnC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EACzB,MAAMC,OAAO,GAAG;IACZC,GAAG,EAAEA,CAACC,KAAK,EAAEC,MAAM,EAAEC,SAAS,MAAM;MAChCA,SAAS,EAAEF,KAAK,CAACE,SAAS;MAC1BC,OAAO,EAAEH,KAAK,CAACI,MAAM,GAAGC,QAAQ,CAAC,CAACC,IAAI,CAACC,GAAG,EAAE,GAAGP,KAAK,CAACE,SAAS,IAAE,IAAI,CAAC,GAAGF,KAAK,CAACG,OAAO;MACrFK,eAAe,EAAER,KAAK,CAACG,OAAO,GAAG,EAAE;MACnCM,OAAO,EAAEJ,QAAQ,CAACL,KAAK,CAACG,OAAO,GAAC,EAAE,CAAC;MACnCO,KAAK,EAAEL,QAAQ,CAACL,KAAK,CAACS,OAAO,GAAC,EAAE,CAAC;MACjCE,eAAe,EAAEX,KAAK,CAACS,OAAO,GAAG,EAAE;MACnCL,MAAM,EAAEJ,KAAK,CAACI,MAAM;MACpBQ,QAAQ,EAAEZ,KAAK,CAACY,QAAQ;MACxBC,aAAa,EAAEb,KAAK,CAACY,QAAQ,GAAGZ,KAAK,CAACa,aAAa,GAACZ,MAAM,GAAGD,KAAK,CAACa;IACvE,CAAC,CACI;IACLC,IAAI,EAAGd,KAAK,KAAM;MACdE,SAAS,EAAEI,IAAI,CAACC,GAAG,EAAE,GAAC,IAAI;MAC1BJ,OAAO,EAAE,CAAC;MACVK,eAAe,EAAE,CAAC;MAClBC,OAAO,EAAE,CAAC;MACVC,KAAK,EAAE,CAAC;MACRC,eAAe,EAAE,CAAC;MAClBP,MAAM,EAAE,IAAI;MACZQ,QAAQ,EAAE,KAAK;MACfC,aAAa,EAAEb,KAAK,CAACa;IACzB,CAAC,CAAC;IACFE,KAAK,EAAGf,KAAK,KAAM;MACfE,SAAS,EAAEF,KAAK,CAACE,SAAS;MAC1BC,OAAO,EAAEH,KAAK,CAACG,OAAO;MACtBK,eAAe,EAAER,KAAK,CAACQ,eAAe;MACtCC,OAAO,EAAET,KAAK,CAACS,OAAO;MACtBC,KAAK,EAAEV,KAAK,CAACU,KAAK;MAClBC,eAAe,EAAEX,KAAK,CAACW,eAAe;MACtCP,MAAM,EAAE,KAAK;MACbQ,QAAQ,EAAE,IAAI;MACdC,aAAa,EAAEb,KAAK,CAACa;IAAc,CAAC,CAAC;IACzCG,OAAO,EAAGhB,KAAK,KAAM;MACjBE,SAAS,EAAEF,KAAK,CAACE,SAAS;MAC1BC,OAAO,EAAEH,KAAK,CAACG,OAAO;MACtBK,eAAe,EAAER,KAAK,CAACQ,eAAe;MACtCC,OAAO,EAAET,KAAK,CAACS,OAAO;MACtBC,KAAK,EAAEV,KAAK,CAACU,KAAK;MAClBC,eAAe,EAAEX,KAAK,CAACW,eAAe;MACtCP,MAAM,EAAE,IAAI;MACZQ,QAAQ,EAAE,IAAI;MACdC,aAAa,EAAEb,KAAK,CAACa;IAAc,CAAC;EAC5C,CAAC;EAGDjB,SAAS,CAACE,OAAO,EAAE;IAAEK,OAAO,EAAE,CAAC;IAAEM,OAAO,EAAE,CAAC;IAAEC,KAAK,EAAE,CAAC;IAAEN,MAAM,EAAE;EAAM,CAAC,CAAC;AAC3E,CAAC;AAED,eAAeP,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}